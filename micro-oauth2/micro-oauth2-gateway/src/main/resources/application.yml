server:
  port: 9201
spring:
  profiles:
    active: dev
  application:
    name: micro-oauth2-gateway
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848
    gateway:
      routes: #配置路由路径
        - id: oauth2-api-route  #路由的ID
          uri: lb://micro-oauth2-api #与断言匹配后路由地址（目标地址）
          predicates: # 断言，如果请求路径与断言相匹配的则进行路由。比如访问网关的请求地址：http://localhost:9201/api/hello会路由到micro-oauth2-api服务的 /hello
            - Path=/api/**
          filters:
            - StripPrefix=1 # 将请求中的第一个路径去掉 请求路径以/区分，一个/表示一个路径，如:http://localhost:9201/api/hello 会变成http://localhost:9201/hello
#            - PrefixPath=/order # 为请求路径添加前缀/order，如：http://localhost:9201/api/hello 会变成http://localhost:9201/orderhello
        - id: oauth2-auth-route
          uri: lb://micro-oauth2-auth
          predicates:
            - Path=/auth/**  #访问地址：http://localhost:9201/auth/oauth/token 会路由到micro-oauth2-auth服务的 /oauth/token
          filters:
            - StripPrefix=1
      discovery:
        locator:
          enabled: true #开启从注册中心动态创建路由的功能
          lower-case-service-id: true #使用小写服务名，默认是大写
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: 'http://localhost:9401/rsa/publicKey' #配置RSA的公钥访问地址。由于我们的网关服务需要RSA的公钥来验证签名是否合法，所以认证服务需要有个接口把公钥暴露出来；

  # 初始化的时候把资源与角色匹配关系缓存到Redis中，方便网关服务进行鉴权的时候获取。
  redis:
    database: 0
    port: 6379
    host: localhost
    password:

secure:
  ignore:
    urls: #配置白名单路径
      - "/actuator/**"
      - "/auth/oauth/token"